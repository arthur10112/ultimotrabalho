# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qNzK-eohVWG3fn0EAuX4UZfEftl2RNMr
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

from sklearn.naive_bayes import GaussianNB # 1. Escolha do modelo.
model_bayes = GaussianNB()                 # 2. Escolha dos hiperparâmetros e intanciação.

df_train = pd.read_csv('train.csv')
df_gender_submission = pd.read_csv('gender_submission.csv')
df_train.head()

df_gender_submission.head() #0 nao sobreviveu 1 sobreviveu

df_train.Survived.unique()   #0 nao sobreviveu 1 sobreviveu

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline            
sns.pairplot(df_train, hue ='Survived')   #sns gera plot para as todos

#3.1
x_train = df_gender_submission  #setando paramentro

#3.2
y_train = df_gender_submission.Survived
y_train.head()    #sepeparamos quem eh target

# 3.3 Separação do Banco de Dados
from sklearn.model_selection import train_test_split
Xtrain, Xtest, ytrain, ytest = train_test_split(x_train, y_train, random_state=2020) #setando parametro

y_model_bayes = model_bayes.predict(Xtest)

model_bayes.fit(Xtrain, ytrain)  #predicoes em dados novos

y_model_bayes

ytest

from sklearn.metrics import accuracy_score
accuracy_score(ytest, y_model_bayes)

"""##Regressao logistica"""

from sklearn.tree import DecisionTreeClassifier  # 1
model_decisiont = DecisionTreeClassifier()       # 2
                                                 # 3    
model_decisiont.fit(Xtrain, ytrain)              # 4 ajuste de modelo

# 5 Faça predições em dados novos
y_model_decisiont = model_decisiont.predict(Xtest)

y_model_decisiont

y_model_bayes

ytest

accuracy_score(ytest, y_model_bayes)

accuracy_score(ytest, y_model_decisiont)

"""##Analise dos resultados"""

from sklearn.metrics import confusion_matrix

mat_bayes = confusion_matrix(ytest, y_model_bayes)

mat_bayes

import matplotlib.pyplot as plt

sns.heatmap(mat_bayes, square=True, annot = True)
plt.xlabel('Valores Preditos')
plt.ylabel('Valores Reais')

mat_decisiont = confusion_matrix(ytest, y_model_decisiont)
sns.heatmap(mat_decisiont, square=True, annot = True)
plt.xlabel('Valores Preditos')
plt.ylabel('Valores Reais')